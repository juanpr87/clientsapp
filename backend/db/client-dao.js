'use strict';

const debug = require('debug')('clientsapp:server');

const mongoose = require('mongoose');

// Mongoose connection
const connection = require('./connection');
// Mongoose models
const models = require('./models');

/**
  * Gets clients from the database that matches the filters passed
  * @param filter filter object in the form {name: 'Juan Perez'}
  * @param callback function which takes 2 params:
  *   - err error object
  *   - clients the clients retrieved
  **/
module.exports.getClients = function(filter, callback) {
  debug('Connecting to DB...');

  connection.connect(function(err, connection) {
    if (err != null) {
      console.error('Error connecting to DB: ', err);
      callback(err);
      return;
    }
    if (filter == null) {
      filter = {};
    } else if (Object.keys(filter).includes('id')) {
      filter._id = filter.id;
      delete filter.id;
    }

    debug('Retrieving all Client documents from DB which match the filters passed...');
    const Client = models.models().Client;
    Client.find(filter, function(err, clients) {
      if (err) {
        console.error('Error while retrieving Client documents: ', err);
        callback(err);
      } else {
        let result = [];
        for (let index in clients) {
          const client = clients[index];
          result.push({
            id: client._id,
            name: client.name,
            email: client.email,
            phone: client.phone
          });
        }
        callback(null, result);
      }
    });
  });
}

/**
  * Inserts a client into the database
  * @param client client object to insert (property id, if exists, will be ignored)
  * @param callback function which takes 2 params:
  *   - err error object
  *   - client inserted object with its autogenerated ID (in property id)
  **/
module.exports.insertClient = function(client, callback) {
  debug('Connecting to DB...');
  connection.connect(function(err, connection) {
    if (err != undefined) {
      console.error('Error connecting to DB: ', err);
      callback(err);
      return;
    }

    debug('Saving Client document...');
    const Client = models.models().Client;
    const clientModel = new Client({
      name: client.name,
      email: client.email,
      phone: client.phone
    });
    clientModel.save(function(err, client) {
      if (err) {
        console.error('Error while saving Client document: ', err);
        callback(err);
      } else {
        debug('Saving ok: ', client);
        callback(null, {
          id: client._id,
          name: client.name,
          email: client.email,
          phone: client.phone
        });
      }
    });
  });
}

/**
  * Updates a client
  * @param client client object to update (property id, if exists, will be ignored)
  * @param clientId ID whose client will be updated
  * @param callback function which takes 2 params:
  *   - err error object
  *   - client updated object
  **/
module.exports.updateClient = function(client, clientId, callback) {
  debug('Connecting to DB...');
  connection.connect(function(err, connection) {
    if (err != undefined) {
      console.error('Error connecting to DB: ', err);
      callback(err);
      return;
    }

    debug('Updating Client document...');
    const Client = models.models().Client;
    Client.updateOne(
	    {
        _id: mongoose.Types.ObjectId(clientId)
      },
      {
      	$set: {
      		name: client.name,
		      email: client.email,
		      phone: client.phone
      	}
      },
    	function(err, result) {
			  if (err) {
			    console.error('Error while saving Client document: ', err);
			    callback(err);
			  } else {
			    debug('Saving result: %o', result);
			    callback(null, result);
			  }
			}
		);
  });
}

/**
  * Deletes a client from the database
  * @param client clientId to delete
  * @param callback function which takes 2 params:
  *   - err error object
  *   - result delete result object
  **/
module.exports.deleteClient = function(clientId, callback) {
  debug('Connecting to DB...');
  connection.connect(function(err, connection) {
    if (err != undefined) {
      console.error('Error connecting to DB: ', err);
      callback(err);
      return;
    }

    debug('Deleting a Client document by its ID...');
    const Client = models.models().Client;
    Client.deleteOne({_id: clientId}, function(err, result) {
      if (err) {
        console.error('Error while deleting a Client document by ID: ', err);
        callback(err);
      } else {
        debug('Delete ok: ', result);
        callback(null, result);
      }
    });
  });
}
